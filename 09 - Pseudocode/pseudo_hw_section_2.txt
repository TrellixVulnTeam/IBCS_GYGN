// 1a
// [[9,8,7],[6,5,4],[3,2,1]]

// 1bi
// 0, 4, 0, 4

// 1bii
//Row 0 will constantly be overwritten whenever TOP is being filled, and initial and final indices for LEFT and RIGHT, respectively, will incorrectly stay at 0

// 1biii
// 3, 0

// 1c
S=input("Enter an integer greater than zero")
K=S*S
Z=1
TOP = 0
BOTTOM = S-1
LEFT = 0
RIGHT = S-1
ROTATE=0
A= new Array()
loop ROW from 0 to S-1
        A[ROW]=new Array()
end loop
loop while Z<=K
	if ROTATE mod 4 = 0 then
		loop N from LEFT to RIGHT
			A[TOP][N]=Z
			Z=Z+1
		end loop
		TOP=TOP+1
	else if ROTATE mod 4 = 1 then
		loop N from TOP to BOTTOM
			A[N][RIGHT]=Z
			Z=Z+1
		end loop
		RIGHT=RIGHT-1
	else if ROTATE mod 4 = 2 then
		loop N from 0 to RIGHT-LEFT
			A[BOTTOM][RIGHT-N]=Z
			Z=Z+1
		end loop
		BOTTOM=BOTTOM-1
	else
		loop N from 0 to BOTTOM-TOP
			A[BOTTOM-N][LEFT]=Z
			Z=Z+1
		end loop
		LEFT=LEFT+1
	end if
        ROTATE = ROTATE+1
end loop
loop ROW from 0 to S-1
	loop COLUMN from 0 to S-1
		output A[ROW][COLUMN]
	end loop
        output ""
end loop

// 2a
// It is easy to access objects from a linked list, as all tickets can be organized in memory by order of ticket number. Thus, each ticket will point to the consequtive ticket

//2bi
// Updating the Date and Arrival values of a ticket

//2bii
// Updating the Date and PaidOn values of a ticket


//2c
// Check if the difference between the time of exit and the PaidAt time has a difference of more than 10 minutes

//2d
// For the exiting ticket, check the PaidAt time is valid. Once complete, update the display, decreasing by one, and raise the exit barrier. Then, issue a ticket and raise the barrier. Update the values of Nr, Date and Arrival. Update the display to increase by one.

//2e
// It will be inefficient to search for a specific ticket in the memory as all previous tickets are kept in the linked list.

//2f
// Check the time of stay
// If it exceeds 24 hours, return the price as 30*(the duration divided by 24, rounded up)
// Otherwise, if it exceeds 4 hours, return the price as 30
// Otherwise, if it exceeds 2.5 hours, return the price as 18
// Otherwise, if it exceeds 2 hours, return the price as 8
// Otherwise, if it exceeds 30 minutes, return the price as 3
// Otherwise, return the price as 0.5